// protoc --go_out=./pkg --go_opt=paths=source_relative --go-grpc_out=./pkg --go-grpc_opt=paths=source_relative ./api/grpc/v1/practice.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/grpc/v1/practice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Practice_GetCourseQuizzes_FullMethodName    = "/practice.v1.Practice/GetCourseQuizzes"
	Practice_StartQuizz_FullMethodName          = "/practice.v1.Practice/StartQuizz"
	Practice_GetQuizzQuestion_FullMethodName    = "/practice.v1.Practice/GetQuizzQuestion"
	Practice_SubmitQuizzQuestion_FullMethodName = "/practice.v1.Practice/SubmitQuizzQuestion"
	Practice_SubmitQuizz_FullMethodName         = "/practice.v1.Practice/SubmitQuizz"
)

// PracticeClient is the client API for Practice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PracticeClient interface {
	GetCourseQuizzes(ctx context.Context, in *GetCourseQuizzesRequest, opts ...grpc.CallOption) (*GetCourseQuizzesResponse, error)
	StartQuizz(ctx context.Context, in *StartQuizzRequest, opts ...grpc.CallOption) (*StartQuizzResponse, error)
	GetQuizzQuestion(ctx context.Context, in *GetQuizzQuestionRequest, opts ...grpc.CallOption) (*GetQuizzQuestionResponse, error)
	SubmitQuizzQuestion(ctx context.Context, in *SubmitQuizzQuestionRequest, opts ...grpc.CallOption) (*SubmitQuizzQuestionResponse, error)
	SubmitQuizz(ctx context.Context, in *SubmitQuizzRequest, opts ...grpc.CallOption) (*SubmitQuizzResponse, error)
}

type practiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPracticeClient(cc grpc.ClientConnInterface) PracticeClient {
	return &practiceClient{cc}
}

func (c *practiceClient) GetCourseQuizzes(ctx context.Context, in *GetCourseQuizzesRequest, opts ...grpc.CallOption) (*GetCourseQuizzesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseQuizzesResponse)
	err := c.cc.Invoke(ctx, Practice_GetCourseQuizzes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practiceClient) StartQuizz(ctx context.Context, in *StartQuizzRequest, opts ...grpc.CallOption) (*StartQuizzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartQuizzResponse)
	err := c.cc.Invoke(ctx, Practice_StartQuizz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practiceClient) GetQuizzQuestion(ctx context.Context, in *GetQuizzQuestionRequest, opts ...grpc.CallOption) (*GetQuizzQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizzQuestionResponse)
	err := c.cc.Invoke(ctx, Practice_GetQuizzQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practiceClient) SubmitQuizzQuestion(ctx context.Context, in *SubmitQuizzQuestionRequest, opts ...grpc.CallOption) (*SubmitQuizzQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitQuizzQuestionResponse)
	err := c.cc.Invoke(ctx, Practice_SubmitQuizzQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practiceClient) SubmitQuizz(ctx context.Context, in *SubmitQuizzRequest, opts ...grpc.CallOption) (*SubmitQuizzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitQuizzResponse)
	err := c.cc.Invoke(ctx, Practice_SubmitQuizz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PracticeServer is the server API for Practice service.
// All implementations must embed UnimplementedPracticeServer
// for forward compatibility.
type PracticeServer interface {
	GetCourseQuizzes(context.Context, *GetCourseQuizzesRequest) (*GetCourseQuizzesResponse, error)
	StartQuizz(context.Context, *StartQuizzRequest) (*StartQuizzResponse, error)
	GetQuizzQuestion(context.Context, *GetQuizzQuestionRequest) (*GetQuizzQuestionResponse, error)
	SubmitQuizzQuestion(context.Context, *SubmitQuizzQuestionRequest) (*SubmitQuizzQuestionResponse, error)
	SubmitQuizz(context.Context, *SubmitQuizzRequest) (*SubmitQuizzResponse, error)
	mustEmbedUnimplementedPracticeServer()
}

// UnimplementedPracticeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPracticeServer struct{}

func (UnimplementedPracticeServer) GetCourseQuizzes(context.Context, *GetCourseQuizzesRequest) (*GetCourseQuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseQuizzes not implemented")
}
func (UnimplementedPracticeServer) StartQuizz(context.Context, *StartQuizzRequest) (*StartQuizzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQuizz not implemented")
}
func (UnimplementedPracticeServer) GetQuizzQuestion(context.Context, *GetQuizzQuestionRequest) (*GetQuizzQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizzQuestion not implemented")
}
func (UnimplementedPracticeServer) SubmitQuizzQuestion(context.Context, *SubmitQuizzQuestionRequest) (*SubmitQuizzQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuizzQuestion not implemented")
}
func (UnimplementedPracticeServer) SubmitQuizz(context.Context, *SubmitQuizzRequest) (*SubmitQuizzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuizz not implemented")
}
func (UnimplementedPracticeServer) mustEmbedUnimplementedPracticeServer() {}
func (UnimplementedPracticeServer) testEmbeddedByValue()                  {}

// UnsafePracticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PracticeServer will
// result in compilation errors.
type UnsafePracticeServer interface {
	mustEmbedUnimplementedPracticeServer()
}

func RegisterPracticeServer(s grpc.ServiceRegistrar, srv PracticeServer) {
	// If the following call pancis, it indicates UnimplementedPracticeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Practice_ServiceDesc, srv)
}

func _Practice_GetCourseQuizzes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseQuizzesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServer).GetCourseQuizzes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Practice_GetCourseQuizzes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServer).GetCourseQuizzes(ctx, req.(*GetCourseQuizzesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Practice_StartQuizz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartQuizzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServer).StartQuizz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Practice_StartQuizz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServer).StartQuizz(ctx, req.(*StartQuizzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Practice_GetQuizzQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizzQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServer).GetQuizzQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Practice_GetQuizzQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServer).GetQuizzQuestion(ctx, req.(*GetQuizzQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Practice_SubmitQuizzQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizzQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServer).SubmitQuizzQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Practice_SubmitQuizzQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServer).SubmitQuizzQuestion(ctx, req.(*SubmitQuizzQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Practice_SubmitQuizz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServer).SubmitQuizz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Practice_SubmitQuizz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServer).SubmitQuizz(ctx, req.(*SubmitQuizzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Practice_ServiceDesc is the grpc.ServiceDesc for Practice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Practice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "practice.v1.Practice",
	HandlerType: (*PracticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseQuizzes",
			Handler:    _Practice_GetCourseQuizzes_Handler,
		},
		{
			MethodName: "StartQuizz",
			Handler:    _Practice_StartQuizz_Handler,
		},
		{
			MethodName: "GetQuizzQuestion",
			Handler:    _Practice_GetQuizzQuestion_Handler,
		},
		{
			MethodName: "SubmitQuizzQuestion",
			Handler:    _Practice_SubmitQuizzQuestion_Handler,
		},
		{
			MethodName: "SubmitQuizz",
			Handler:    _Practice_SubmitQuizz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/practice.proto",
}
